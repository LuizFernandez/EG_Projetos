// Regras Sintáticas
start: statments*

statments: declaration
         | attribution
		 | selection
		 | cycle

declaration: type ID ( | "=" value )

attribution: ID "=" value

type: primitive_type
	| complex_type

primitive_type: PRIMITIVE_TYPES

complex_type  : COMPLEX_TYPE

value: ID                  -> value_id
     | primitive_value
     | complex_value
	 | operation

primitive_value : INT      -> value_int
				| FLOAT    -> value_float
				| STRING   -> value_string
				| BOOL     -> value_bool

complex_value : list_construct
			  | set_construct
			  | tuple_construct
			  | array_construct

list_construct : LRPAR RRPAR
			   | LRPAR value ("," value)* RRPAR
			   | "list(" ID ")" # ID apenas pode ser do tipo arrary ou set                                      mas tem que ser uma variável

set_construct : "set()"
			  | "set(" ID ")"
			  
tuple_construct : LPAR RPAR
				| LPAR value "," value RPAR

array_construct : "array(" INT ")"
				| "array(" ID ")" # ID é uma vairável do tipo lista, set ou tuple

selection : IF "(" value ")" "{" statments* ( "break" | "return" value )? "}"
		  | IF "(" value ")" "{" statments* "}" "else" ( "{" statments* "}" | selection )

cycle : WHILE "(" value ")" "{" statments* "}"
	  | DO "{" statments* "}" "while" "(" value ")"
	  | FOR ID "in" ( value ) "{" statments* "}"

operation: expr
         | expr opr expr

opr : EQ
    | NE
    | LT
    | LE
    | GT
    | GE

expr : term
     | expr opa term

term : factor
     | term opm factor

opa : ADD 
	| SUB 
	| OR

opm : MUL 
	| DIV 
	| AND
	| MOD

factor : INT                     -> value_int
       | FLOAT                   -> value_float
       | STRING                  -> value_string
       | BOOL                    -> value_bool
	   | ID                      -> value_id
       | LPAR operation RPAR     -> factor_par
       | operation POT operation -> factor_pot
                
// Regras Lexicográficas

ID:/(?!int|float|bool|string|set|list|array|tuple|True|False\b)[_aA-zZ][aA-zZ_\d]*/

INT: /(-)?\d+/
FLOAT: /(-)?\d+\.\d*/
STRING: /"[^"]*"/
BOOL: "True"|"False"
IF : "if"
WHILE : "while"
DO : "do"
FOR : "for"

RRPAR: "]"
LRPAR: "["
LPAR: "("
RPAR: ")"

PRIMITIVE_TYPES: /int|float|bool|string/
COMPLEX_TYPE: /set|list|tuple|array/

EQ: "=="
NE: "!="
LT: "<"
LE: "<="
GT: ">"
GE: ">="

ADD: "+"
SUB: "-"
OR: "||"

MUL: "*"
DIV: "/"
AND: "&&"
MOD: "%"

POT: "^"


// Tratamento dos espaços em branco
%import common.WS
%ignore WS
